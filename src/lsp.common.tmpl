{{/*
   * Copyright 2024 The langsvr Authors
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are met:
   *
   * 1. Redistributions of source code must retain the above copyright notice, this
   *    list of conditions and the following disclaimer.
   *
   * 2. Redistributions in binary form must reproduce the above copyright notice,
   *    this list of conditions and the following disclaimer in the documentation
   *    and/or other materials provided with the distribution.
   *
   * 3. Neither the name of the copyright holder nor the names of its
   *    contributors may be used to endorse or promote products derived from
   *    this software without specific prior written permission.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/}}

{{- /* ------------------------------------------------------------------ */ -}}
{{-                             define "TypeList"                            -}}
{{- /* ------------------------------------------------------------------ */ -}}
{{-   range $i, $e := .}}
{{-     if $i}}, {{end}}
{{-     Eval "Type" .}}
{{-   end}}
{{- end}}


{{- /* ------------------------------------------------------------------ */ -}}
{{-                               define "Type"                              -}}
{{- /* ------------------------------------------------------------------ */ -}}
{{-   if false}}
{{-   else if Is . "BooleanType"          }}Boolean
{{-   else if Is . "DecimalType"          }}Decimal
{{-   else if Is . "DocumentUriType"      }}DocumentUri
{{-   else if Is . "IntegerType"          }}Integer
{{-   else if Is . "NullType"             }}Null
{{-   else if Is . "StringType"           }}String
{{-   else if Is . "UintegerType"         }}Uinteger
{{-   else if Is . "URIType"              }}Uri
{{-   else if Is . "ArrayType"            }}std::vector<{{Eval "Type" .Element}}>
{{-   else if Is . "OrType"               }}OneOf<{{range $i, $e := .Items}}{{if $i}}, {{end}}{{Eval "Type" $e}}{{end}}>
{{-   else if Is . "MapType"              }}std::unordered_map<{{Eval "Type" .Key}}, {{Eval "Type" .Value}}>
{{-   else if Is . "ReferenceType"        }}lsp::{{.Name}}
{{-   else if Is . "TupleType"            }}std::tuple<{{range $i, $e := .Items}}{{if $i}}, {{end}}{{Eval "Type" $e}}{{end}}>
{{-   else}}{{Error "unsupported type %T" .}}
{{-   end}}
{{- end}}
